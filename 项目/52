#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <unistd.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>
#include <bluetooth/hci_lib.h>
#include <bluetooth/rfcomm.h>
#include <bluetooth/sdp.h>
#include <bluetooth/sdp_lib.h>

// 通过 uuid ServiceDiscoveryProtocol-ServiceClass 找到服务记录
static uint8_t *sdp_search_rfcomm(uint32_t svc_uuid_int, int channel, uint8_t *sdp_data_ptr, uint32_t sdp_data_len)
{
    uuid_t svc_uuid;
    sdp_list_t *response_list = NULL, *search_list, *attrid_list;
    uint32_t svc_uuid_int_le;

    // 把uuid int转换为uuid
    svc_uuid_int_le = htobs(svc_uuid_int);
    memcpy(&svc_uuid.value, &svc_uuid_int_le, sizeof(uuid_t));

    // 已知的服务记录
    search_list = sdp_list_append(NULL, &svc_uuid);
    attrid_list = sdp_list_append(NULL, &SDP_ATTR_REQ_PROTOCOL_DESC_LIST);
    attrid_list = sdp_list_append(attrid_list, &SDP_ATTR_REQ_BLUETOOTH_PROFILE_DESC_LIST);
    attrid_list = sdp_list_append(attrid_list, &SDP_ATTR_SVCLASS_ID_LIST);
    attrid_list = sdp_list_append(attrid_list, &SDP_ATTR_SERVICE_ID);

    // 请求SDP记录
    int err = 0;
    err = sdp_service_search_attr_req(sdp_data_ptr, search_list, SDP_ATTR_REQ_RANGE, attrid_list, &response_list);

    // 获取通道信息
    uint8_t *rfcomm_channel = NULL;
    if (response_list) {
        sdp_seq_t *proto_list;
        sdp_list_t *proto_param_list;
        sdp_data_t *dtdl;
        sdp_record_t *rec = (sdp_record_t*)response_list;
        // 获取
        sdp_get_access_protos(rec, &proto_list);
        while (proto_list) {
            sdp_list_t *pds = (sdp_list_t*)sdp_seq_pop(proto_list);
            sdp_get_seq_rfcomm_channel(pds, &dtdl);
            if (dtdl) {
                rfcomm_channel = dtdl->data;
                free(dtdl);
                break;
            }
            sdp_list_free(pds, NULL);
        }
        if (rfcomm_channel) {
            printf("找到了通道: %d\n", *rfcomm_channel);
        } else {
            printf("找不到SDP记录中的通道号码.\n");
        }
        sdp_list_free(proto_list, sdp_seq_free);
        if (rfcomm_channel) {
            return rfcomm_channel;
        }
    } else {
        printf("找不到SDP记录.\n");
    }
    return NULL;
}

int main(int argc, char **argv)
{
    uint8_t dest[6] = {0};
    int sockfd, status;
    sdp_session_t *session;
    bdaddr_t bdaddr = {0};

    // 设置目标设备MAC地址
    str2ba("00:11:22:33:44:55", &bdaddr);
    memcpy(dest, &bdaddr, sizeof(dest));

    // 定义UUID
    uuid_t svc_uuid = {0};
    char dest_svc_uuid[] = "00001101-0000-1000-8000-00805f9b34fb";
    str2uuid(dest_svc_uuid, &svc_uuid);

    // 连接到目标设备
    sockfd = socket(AF_BLUETOOTH, SOCK_STREAM, BTPROTO_RFCOMM);
    struct sockaddr_rc addr = {0};
    addr.rc_family = AF_BLUETOOTH;
    addr.rc_channel = (uint8_t)0;
    memcpy(&addr.rc_bdaddr, dest, sizeof(dest));
    status = connect(sockfd, (struct sockaddr *)&addr, sizeof(addr));
    if (status != 0) {
        perror("连接失败");
        exit(1);
    } else {
        printf("成功连接至目标设备!\n");
    }

    //
