#include <iostream>
#include <rplidar.h>

using namespace std;
using namespace rp::standalone::rplidar;

int main() {
    const char* port_name = "/dev/ttyUSB0";
    u_result result;

    RPlidarDriver* lidar = RPlidarDriver::CreateDriver(DRIVER_TYPE_SERIALPORT);
    if (!lidar) {
        cout << "Failed to create RPlidar driver" << endl;
        return -1;
    }

    // 建立连接
    if (IS_FAIL(lidar->connect(port_name, 115200))) {
        cout << "Failed to connect to " << port_name << endl;
        RPlidarDriver::DisposeDriver(lidar);
        return -1;
    }

    lidar->startMotor();

    // 获取设备信息
    rplidar_response_device_info_t devinfo;
    if (IS_FAIL(lidar->getDeviceInfo(devinfo))) {
        cout << "Failed to get Lidar device info" << endl;
        lidar->stopMotor();
        lidar->disconnect();
        RPlidarDriver::DisposeDriver(lidar);
        return -1;
    }

    cout << "Firmware Ver: " << (int)devinfo.firmware_version << endl;
    cout << "Hardware Rev: " << (int)devinfo.hardware_rev << endl;

    // 启动扫描
    lidar->startScan();

    const int scan_duration = 10; // 设置扫描持续时间，单位为秒
    const int max_distance = 5000; // 设置最大测距距离，单位为毫米
    int scan_counter = 0;

    while (scan_counter < scan_duration) {
        scan_counter++;

        // 读取数据
        rplidar_response_measurement_node_t nodes[8192];
        size_t count = _countof(nodes);

        // 如果读取数据失败，则等待 1s 并重试
        if (IS_FAIL(lidar->grabScanData(nodes, count))) {
            continue;
        }

        for (int i = 0; i < (int)count; i++) {
            float angle_degrees = nodes[i].angle_q6_checkbit >> RPLIDAR_RESP_MEASUREMENT_ANGLE_SHIFT;
            float angle = angle_degrees * M_PI / 180.0; // 将角度转换为弧度
            float distance = nodes[i].distance_q2 / 4.0;

            // 如果距离超过最大距离，则跳过该数据
            if (distance > max_distance) {
                continue;
            }

            // 输出数据
            cout << "Angle: " << angle << " Distance: " << distance << " mm" << endl;
        }

        // 如果达到扫描持续时间，则退出循环
        if (scan_counter >= scan_duration) {
            break;
        }

        // 等待 1s 后再进行下一次扫描
        delay(1000);
    }

    // 停止扫描
    lidar->stopScan();

    // 断开连接
    lidar->stopMotor();
    lidar->disconnect();

    // 释放资源
    RPlidarDriver::DisposeDriver(lidar);

    return 0;
}
